// Total Unique elements in each window
class Solution
{
    ArrayList<Integer> countDistinct(int A[], int n, int k)
    {
        // code here 
        HashMap<Integer,Integer> hm=new HashMap<>();
        ArrayList<Integer> al=new ArrayList<>();
        int dist=0;
        //int acquire=0;
        int release=0;
        for(int i=0;i<k;i++){
            if(hm.containsKey(A[i])){
                hm.put(A[i],hm.get(A[i])+1);
            }else{
                dist++;
                hm.put(A[i],1);
            }
        }
        al.add(dist);
        for(int i=k;i<n;i++){
            int disc=A[release];
            hm.put(disc,hm.get(disc)-1);
            release++;
            if(hm.get(disc)==0){
               hm.remove(disc);
               dist--;
            }     
            if(hm.containsKey(A[i])){
                hm.put(A[i],hm.get(A[i])+1);
            }else{
                dist++;
                hm.put(A[i],1);
            }    
            
            al.add(dist);
        }   
        return al;   
    }
}
==============================================================
//Count Of Substrings Having All Unique Characters
import java.util.*;

public class Main {

	public static int solution(String str) {
		// write your code here
		HashMap<Character,Integer> hm=new HashMap<>();
		int answer=0;
		int release=0;
		for(int i=0;i<str.length();i++){
		    Character currentChar=str.charAt(i);
		    while( hm.containsKey(currentChar)){
		        Character disChar=str.charAt(release);
		        hm.put(disChar,hm.get(disChar)-1);
		        if(hm.get(disChar)==0){
		            hm.remove(disChar);
		        }
		        release++;
		    }
		    hm.put(currentChar,1);
		    answer=answer+(i-release+1);
		}
		return answer;
	}
	
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		String str = scn.next();
		System.out.println(solution(str));
	}

}
================================================================
// Longest Substring Without Repeating Characters
class Solution {
    public int lengthOfLongestSubstring(String str) {
        	// write your code here
		HashMap<Character,Boolean> hm=new HashMap<>();
		int answer=0;
		int release=0;
		for(int i=0;i<str.length();i++){
		    Character currentChar=str.charAt(i);
		    while( hm.containsKey(currentChar)){
		        Character disChar=str.charAt(release);
		        hm.put(disChar,false);
		        
		            hm.remove(disChar);
		        
		        release++;
		    }
		    hm.put(currentChar,true);
		    answer=Math.max(answer,(i-release+1));
		}
		return answer;
    }
}
==================================================================
//Optimized version
import java.util.*;

public class Main {

	public static int solution(String str) {
		// write your code here
		HashMap<Character,Integer> hm=new HashMap<>();
		int release=0;
		int total=0;
		for(int i=0;i<str.length();i++){
		    Character cchar=str.charAt(i);
		   if(hm.containsKey(cchar) && hm.get(cchar)>=release){
		       release=hm.get(cchar)+1;
		   }
		    hm.put(cchar,i);
		    total=total+(i-release+1);
		}
		
		return total;
	}
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		String str = scn.next();
		System.out.println(solution(str));
	}
}
==============================================
Count Of Substrings Having At Most K Unique Characters
	public static int solution(String str, int k) {
		// write your code here
		int release=0;
		int answer=0;
		int distnict=0;
		HashMap<Character,Integer> hm=new HashMap<>();
		for(int i=0;i<str.length();i++){
		    Character cuurchar=str.charAt(i);
		    if(hm.containsKey(cuurchar)){
		       int x=hm.get(cuurchar);
		      x++
		       hm.put(cuurchar,x);
		    }else{
		        hm.put(cuurchar,1);
		        distnict++;
		    }    
		    while(distnict>k){
		        Character disc=str.charAt(release);
		        hm.put(disc,hm.get(disc)-1);
		        if(hm.get(disc)==0){
		            hm.remove(disc);
		            distnict--;
		        }  
		        release++;
		    }  
		    answer=answer+(i-release+1);
		}	
		return answer;
	}
==================================================================
Longest Substring with At Most K Distinct Characters
 public int lengthOfLongestSubstringKDistinct(String s, int k) {
        	// write your code here
		int release=0;
		int answer=0;
		int distnict=0;
		HashMap<Character,Integer> hm=new HashMap<Character,Integer>();
		for(int i=0;i<str.length();i++){
		    Character cuurchar=str.charAt(i);
		    if(hm.containsKey(cuurchar)){
		       int x=hm.get(cuurchar);
		       x++;
		       hm.put(cuurchar,x);
		    }else{
		        hm.put(cuurchar,1);
		        distnict++;
		    }  
		    while(release<=i && distnict>k){
		        Character disc=str.charAt(release);
		        release++;
		        int y= hm.get(disc)-1;
		        hm.put(disc,y);
		        if(hm.get(disc)==0){
		            hm.remove(disc);
		            distnict--;
		        } 
		    }
		    answer=Math.max(answer,(i-release+1));   
		}
		    return answer;
        // write your code here
    }
===================================================
Count number of substrings with exatly k unique characters

class Solution
{
    long substrCount (String S, int K) {
        long ans= Atmost(S,K)-Atmost(S,K-1);
        return ans==0?0:ans;
    }
    long Atmost (String S, int K){
        // your code here
        int answer=0;
        int release=0;
        int dist=0;
        HashMap<Character,Integer> hm=new HashMap<>();
        for(int i=0;i<S.length();i++){
            Character currchar =S.charAt(i);
            if(hm.containsKey(currchar)){
                hm.put(currchar,hm.get(currchar)+1);
            }else{
                hm.put(currchar,1);
                dist++;
            }
            
            while(i>=release && dist>K){
                Character disc =S.charAt(release);
                hm.put(disc,hm.get(disc)-1);
                if(hm.get(disc)==0){
                    hm.remove(disc);
                    dist--;
                }
                release++;
            }  
            answer=answer+(i-release+1);        
        }
        return answer;
    }
}
===================================================
//2 pointer approach
class GfG {
    static boolean twoSum(int[] arr, int target){
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (arr[i] + arr[j] == target) {
                    return true;
                }
            }
        }
        return false;
    }

    public static void main(String[] args){

        int[] arr = { 0, -1, 2, -3, 1 };
        int target = -2;
        if (twoSum(arr, target))
            System.out.println("true");
        else
            System.out.println("false");
    }
}
==========================================================
//2 pointer Optimized approach
static void twosum_pointer(int arr[], int sum) {
  int low = 0;
  int high = arr.length - 1;
  while (low < high) {
    if (arr[low] + arr[high] == sum) {
      System.out.println(low + " " + high);
      return;
    } else if (arr[low] + arr[high] < sum) low++;
    else high--;
  }
  System.out.println("-1 -1");
}
================================================================
//3 Sum brute force approach

import java.util.*;

public class tUf {
    public static List<List<Integer>> triplet(int n, int[] arr) {
        Set<List<Integer>> st = new HashSet<>();

        // check all possible triplets:
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (arr[i] + arr[j] + arr[k] == 0) {
                        List<Integer> temp = Arrays.asList(arr[i], arr[j], arr[k]);
                        temp.sort(null);
                        st.add(temp);
                    }
                }
            }
        }

        // store the set elements in the answer:
        List<List<Integer>> ans = new ArrayList<>(st);
        return ans;
    }

    public static void main(String[] args) {
        int[] arr = { -1, 0, 1, 2, -1, -4};
        int n = arr.length;
        List<List<Integer>> ans = triplet(n, arr);
        for (List<Integer> it : ans) {
            System.out.print("[");
            for (Integer i : it) {
                System.out.print(i + " ");
            }
            System.out.print("] ");
        }
        System.out.println();
    }
}
=================================================
//3 Sum Better Approach



import java.util.*;

public class tUf {
    public static List<List<Integer>> triplet(int n, int[] arr) {
        Set<List<Integer>> st = new HashSet<>();

        for (int i = 0; i < n; i++) {
            Set<Integer> hashset = new HashSet<>();
            for (int j = i + 1; j < n; j++) {
                //Calculate the 3rd element:
                int third = -(arr[i] + arr[j]);

                //Find the element in the set:
                if (hashset.contains(third)) {
                    List<Integer> temp = Arrays.asList(arr[i], arr[j], third);
                    temp.sort(null);
                    st.add(temp);
                }
                hashset.add(arr[j]);
            }
        }

        // store the set elements in the answer:
        List<List<Integer>> ans = new ArrayList<>(st);
        return ans;
    }

    public static void main(String[] args) {
        int[] arr = { -1, 0, 1, 2, -1, -4};
        int n = arr.length;
        List<List<Integer>> ans = triplet(n, arr);
        for (List<Integer> it : ans) {
            System.out.print("[");
            for (Integer i : it) {
                System.out.print(i + " ");
            }
            System.out.print("] ");
        }
        System.out.println();
    }
}
==========================================================
import java.util.*;
public class tUf {
    public static List<List<Integer>> triplet(int n, int[] arr) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(arr);

        for (int i = 0; i < n; i++) {
            //remove duplicates:
            if (i != 0 && arr[i] == arr[i - 1]) continue;

            //moving 2 pointers:
            int j = i + 1;
            int k = n - 1;
            while (j < k) {
                int sum = arr[i] + arr[j] + arr[k];
                if (sum < 0) {
                    j++;
                } else if (sum > 0) {
                    k--;
                } else {
                    List<Integer> temp = Arrays.asList(arr[i], arr[j], arr[k]);
                    ans.add(temp);
                    j++;
                    k--;
                    //skip the duplicates:
                    while (j < k && arr[j] == arr[j - 1]) j++;
                    while (j < k && arr[k] == arr[k + 1]) k--;
                }
            }
        }

        return ans;
    }

    public static void main(String[] args) {
        int[] arr = { -1, 0, 1, 2, -1, -4};
        int n = arr.length;
        List<List<Integer>> ans = triplet(n, arr);
        for (List<Integer> it : ans) {
            System.out.print("[");
            for (Integer i : it) {
                System.out.print(i + " ");
            }
            System.out.print("] ");
        }
        System.out.println();
    }
}
=============================================================





